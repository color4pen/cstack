// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum SortOrder {
  asc
  desc
}

enum PublicRange {
  public
  private
}

enum DisplayType {
  grid
  list
  column
  fullColumn
}

model FileGroup {
  id                 String      @id @default(uuid()) @db.Uuid
  name               String
  description        String?
  thumbnailImagePath String?
  sortOrder          SortOrder   @default(asc)
  createdBy          String
  user               User        @relation(fields: [createdBy], references: [id])
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  deletedAt          DateTime?
  files              File[]
  publicRange        PublicRange @default(private)
  displayType        DisplayType @default(list)
}

model File {
  id                 String     @id @default(uuid()) @db.Uuid
  name               String
  path               String
  mimetype           String
  originName         String
  ext                String
  size               Int
  note               String?
  createdBy          String
  user               User       @relation(fields: [createdBy], references: [id])
  thumbnailImagePath String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deletedAt          DateTime?
  groupId            String?    @db.Uuid
  group              FileGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  order              Int
}

model User {
  id         String      @id
  email      String
  name       String?
  profile    Profile?
  files      File[]
  fileGroups FileGroup[]
}

model Profile {
  userId     String  @id
  avatarPath String?
  bio        String?
  user       User?   @relation(fields: [userId], references: [id])
}
